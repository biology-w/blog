// 相邻元素比较，循环一次，找出最大的一个，放在最右边
// 第一次循环 比较 arr.length - 1 次
// 第二次循环 比较 arr.length -2 次
// 第三次循环 比较 arr.length -3 次
// ...
// 共循环 arr.length - 1 ， 比较 (arr.length - 1 + 1) / 2 * (arr.length - 1) 次
const arr = [11, 8, 9, 2, 4, 10];

/**
 * eg:
 * 第一次循环：11,8,9,2,4,10 比较5次
 * 8,11,9,2,4,10
 * 8,9,11,2,4,10
 * 8,9,2,11,4,10
 * 8,9,2,4,11,10
 * 8,9,2,4,10,11
 *
 * 第二次循环 8,9,2,4,10  比较4次
 * 8,9,2,4,10
 * 8,2,9,4,10
 * 8,2,4,9,10
 * 8,2,4,9,10
 *
 * 第三次循环 8,2,4,9 比较3次
 * 2,8,4,9
 * 2,4,8,9
 * 2,4,8,9
 *
 * 第四次循环 2,4,8 比较2次
 * 2,4,8
 * 2,4,8
 *
 * 第五次循环 2,4 比较1次
 * 2,4
 */
let count = 0;
for (let i = arr.length - 1; i > 0; i--) {
  for (let j = 0; j < i; j++) {
    count++;
    if (arr[j] > arr[j + 1]) {
      const temp = arr[j];
      arr[j] = arr[j + 1];
      arr[j + 1] = temp;
    }
  }
}

console.log(arr, count);
